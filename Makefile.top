our %PREREQ_PM;
BEGIN {
   %PREREQ_PM= (
      #'ExtUtils::Depends' => '0.405',
      'Devel::CheckLib'   => '1.03',
   );
   # If the prereqs for this script are missing,
   # write out a Makefile that tells CPAN to install them
   my $use_prereqs_code= join('', map { "use $_ '$PREREQ_PM{$_}'; " } keys %PREREQ_PM).'1;';
   print $use_prereqs_code."\n";
   unless (eval $use_prereqs_code) {
      warn "$@\n";
      WriteMakefile(
         NAME         => 'Crypt::SecretBuffer',
         PREREQ_FATAL => 1,
         PREREQ_PM    => \%PREREQ_PM,
      );
      exit 1; # not reached
   }
}

use lib "./inc";
use ExtUtils::Depends;

my $dep= ExtUtils::Depends->new('Crypt::SecretBuffer');
my @incpath;
my @libpath;
my @have;

sub check_lib_and_define {
   my ($macro, %opts)= @_;
   if (check_lib(
      ($opts{fn}? (
         # Just take the address of it, to verify it gets linked
         function => qq{void (*fn)()= (void(*)()) $opts{fn}; return fn != NULL;},
      ) : ()),
      ($opts{function}? ( function => $opts{function} ) : ()),
      ($opts{h}? ( header => $opts{h} ) : ()),
      ($opts{lib}? ( lib => $opts{lib} ) : ()),
      incpath  => \@incpath,
      libpath  => \@libpath,
      debug => 1,
   )) {
      warn "Found ".($opts{fn}||$opts{h}||$opts{lib});
      push @have, $macro;
      return 1;
   } else {
      warn "Don't have ".($opts{fn}||$opts{h}||$opts{lib});
      return 0;
   }
}

check_lib_and_define(LIBSSL    => fn => 'RAND_bytes', h => 'openssl/rand.h', lib => 'ssl');
check_lib_and_define(MINCORE   => fn => 'mincore',    h => 'sys/mman.h');
check_lib_and_define(GETRANDOM => fn => 'getrandom',  h => 'sys/random.h');
check_lib_and_define(STDBOOL   =>                     h => 'stdbool.h');
if ($^O ne 'MSWin32') { # none available on windows, and check_lib giving false positives...
   check_lib_and_define(NATIVE_BOOL    => function => 'bool x= true; return x == false;');
   check_lib_and_define(EXPLICIT_BZERO => fn => 'explicit_bzero', h => 'string.h');
   check_lib_and_define(MEMMEM         => fn => 'memmem',         h => 'string.h');
}

my @exports= `$^X build-manual-linkage-header.pl --list-prototypes < SecretBuffer.h`;
chomp(@exports);
$dep->add_exported_c_api($_) for @exports;

$dep->set_libs(join ' ', map "-L$_", @libpath)
   if @libpath;
$dep->set_inc(join ' ', map "-I$_", @incpath)
   if @incpath;
$dep->install('SecretBuffer.h', 'SecretBufferManualLinkage.h');
$dep->add_xs('SecretBuffer.xs');
$dep->add_pm(map { my $n= $_; $n =~ s/^lib/\$(INST_LIB)/; $_ => $n } <lib/*/*.pm>, <lib/*/*/*.pm>);
$dep->add_typemaps('typemap');
$dep->save_config('InstallFiles.pm');

sub MY::postamble {
   return <<LITERAL;

SecretBufferManualLinkage.h: SecretBuffer.h
\t\$(PERL) build-manual-linkage-header.pl < SecretBuffer.h > SecretBufferManualLinkage.h

SecretBuffer.c: SecretBufferManualLinkage.h

LITERAL
}
